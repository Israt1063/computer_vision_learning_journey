# üìò Lecture Notes  
## **Module 2: Image Processing Basics**

---

## üéì **Class 2: Image Enhancement**

### üîç **Topics of Discussion:**
- About Digital Image  
- Representation of Digital Image  
- Image Enhancement Methods  
- Classification of Enhancement Methods  
- Enhancement Methods with Code & Output  

---

### üñºÔ∏è **1. About Digital Image**

- A **digital image** is a 2D matrix of pixels.
- Each pixel has an intensity value representing brightness or color (grayscale or RGB).
- **Resolution**: Defined by the number of pixels (width √ó height).

---

### üß† **2. Representation of Digital Image**

- **Grayscale image**: Single 2D array (values 0‚Äì255).
- **Color image**: 3D array with 3 channels (Red, Green, Blue).
- Stored as matrices using **NumPy arrays** in Python with OpenCV or PIL.

---

### ‚ú® **3. Image Enhancement Methods**

- Techniques to **improve the visual appearance** of an image or to make features more detectable.
- Examples:
  - **Histogram equalization**
  - **Contrast stretching**
  - **Brightness adjustment**

---

### üßÆ **4. Classification of Enhancement Methods**

- **Spatial Domain Techniques**:
  - Direct manipulation of pixel values.
  - e.g., Histogram Equalization, Log Transform, Contrast Stretching

- **Frequency Domain Techniques**:
  - Work on Fourier Transform of the image.
  - e.g., High-pass or Low-pass filtering in frequency space

---

### üíª **5. Image Enhancement Methods with Code & Output**

```python
import cv2
import matplotlib.pyplot as plt

# Load image
img = cv2.imread("input_images/X-ray.jpeg", cv2.IMREAD_GRAYSCALE)

# Histogram Equalization
equalized = cv2.equalizeHist(img)

# Show results
plt.figure(figsize=(10,4))
plt.subplot(1,2,1), plt.imshow(img, cmap='gray'), plt.title("Original")
plt.subplot(1,2,2), plt.imshow(equalized, cmap='gray'), plt.title("Equalized")
plt.show()

# Save output
cv2.imwrite("output_images/enhanced_X-ray.jpeg", equalized)
